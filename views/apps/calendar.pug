extends ../layout
block content 
  style. 
    #views-switcher {
      width: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .calendar-visualizer-active {
      background-color: #f5f5f5;
      color: #007bff;
    }

    .calendar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .calendar-header button {
      background-color: transparent;
      border: none;
      outline: none;
      cursor: pointer;
      font-size: 1.5rem;
      color: #007bff;
      width: 100%;
    }

    .calendar-header button:hover {
      color: #0056b3;
    }

    .calendar-body {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      width: 100%;
    }

    .calendar-year {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
      flex-wrap: wrap;
      gap: 0.5%;
    }

    .calendar-days {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      width: 100%;
    }

    .calendar-year .calendar-month {
      width: calc(50% - 1%);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .calendar-week {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
    }

    .calendar-day {
      width: 2rem;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: flex-start;
      margin: 0.1rem;
      border: 1px solid #dee2e6;
      border-radius: 0.2rem;
      cursor: pointer;
      width: calc(100% / 7);
      height: 80px;
      font-size: large;
      padding: 8px;
    }

    .calendar-year .calendar-day {
      height: 40px;
    }

    .calendar-day:hover {
      background-color: #f5f5f5;
    }

    .calendar-month-name {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 1rem;
      width: 100%;
      text-align: center;
    }

    .prev-days, .next-days {
      color: #6c757d;
    }

    .hours {
      width: 100%;
    }

    .day-hour {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #dee2e6;
      cursor: pointer;
      margin: 0.5rem;
      border-radius: 0.2rem;
      position: relative;
    }

    .day-hour .hour-number {
      width: 100%;
      height: 2rem; 
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 0.5rem;
      font-weight: bold;
    }

    .day-hour .hour-number hr {
      width: 100%;
      margin: 0;
      flex: 1;
    }

    .bars-holidays {
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      width: 100%;
    }

    .bar-holiday {
      display: flex;
      width: 100%;
      flex: 1;
      height: 6px;
      color: white;
      padding: 6px;
    }

    .bars-holidays .bar-holiday:first-child {
      border-top-left-radius: 0.2rem;
      border-bottom-left-radius: 0.2rem;      
    }

    .bars-holidays .bar-holiday:last-child {
      border-top-right-radius: 0.2rem;
      border-bottom-right-radius: 0.2rem;      
    }    

    .hour-active {
      border: 3px solid #007bff;
      margin: 0.5rem;
    }

    .hour-active hr {
      background-color: inherit;
    }

    .hours .hour-active {
      border-radius: 0;
      border-width: 3px;
      border-style: solid;
      border-color: #007bff;
      border-top: none;
      border-bottom: none;
      margin: 0 0.5rem;
    }
    
    .hours .hour-active.hour-active-first {
      border-top-left-radius: 0.5rem;
      border-top-right-radius: 0.5rem;
      border-bottom: none;
      border-top-style: solid;
      border-top-width: 3px;
    }

    .hours .hour-active.hour-active-last {
      border-bottom-right-radius: 0.5rem;
      border-bottom-left-radius: 0.5rem;
      border-top: none;
      border-bottom-style: solid;
      border-bottom-width: 3px;
    }

    .hour-inactive {
      border: 3px solid #6c757d;
      border-radius: 6px;
      margin: 0.5rem;
    }

  h3.title-of-page
    i.fi.fi-rr-calendar
    |  Agenda
  h3#today

  #views-switcher 
    button(onclick='changeToday()', id='btn-today-calendar', title='Hoje')
      i.fi.fi-rr-calendar-day
      | Hoje
    button(onclick='changeView(this, "year")', id='btn-year-view')
      i.fi.fi-rr-calendar-days 
      | Anual
    button(onclick='changeView(this, "month")', id='btn-month-view')
      i.fi.fi-rr-calendar-lines
      | Mensal
    button(onclick='changeView(this, "week")', id='btn-week-view')
      i.fi.fi-rr-calendar-week
      | Semanal
    button(onclick='changeView(this, "day")', id='btn-day-view')
      i.fi.fi-rr-calendar-day
      | Diário
    button.btn-md.btn-blue.circle(data-modal-open="create-event", title="create-event", id="btn-create-event")
      i.fi.fi-rr-calendar-plus

  div(data-modal="create-event")
    form.modal.modal-md(action="/apps/calendar/new", method="POST")
      .modal-head
        h3.modal-title
          div
            i.fi.fi-rr-calendar-day
            | Novo evento
          i.fi.fi-rr-cross-small.text-red(title="Fechar modal", data-modal-close="create-event")
      .modal-body
        .form-item 
          label(for="title") 
            i.fi.fi-rr-edit-alt
            |  Título
          input(type="text", name="title", id="title", placeholder="Título do evento")
        .form-item
          label(for="description") 
            i.fi.fi-rr-edit-alt
            |  Descrição
          textarea.form-control(name="description", id="description")
        .form-group 
          .form-item 
            label(for="dateStart") 
              i.fi.fi-rr-calendar-check
              |  Data de início
            input(type="date", name="dateStart", id="dateStart")
          .form-item 
            label(for="timeStart") 
              i.fi.fi-bs-time-quarter-past
              |  Hora de início
            input(type="time", name="timeStart", id="timeStart", value="08:00")
        .form-group 
          .form-item 
            label(for="dateFinish") 
              i.fi.fi-rr-calendar-xmark
              |  Data de término
            input(type="date", name="dateFinish", id="dateFinish")
          .form-item
            label(for="timeFinish") 
              i.fi.fi-rr-time-delete
              |  Hora de término
            input(type="time", name="timeFinish", id="timeFinish", value="10:00")
        .form-group
          .form-item 
            label(for="type") 
              i.fi.fi-rr-tag
              |  Tipo
            select.form-control(name="type", id="type")
              option(value="1") Reunião
              option(value="2") Compromisso
              option(value="3", selected) Tarefa
              option(value="4") Outro
          .form-item 
            label(for="color") 
              i.fi.fi-rr-palette
              |  Cor
            input(type="color", name="color", id="color", value="#007bff", list="colors")
            datalist#colors
              option(value="#007bff")
              option(value="#6610f2")
              option(value="#6f42c1")
              option(value="#e83e8c")
              option(value="#dc3545")
              option(value="#fd7e14")
              option(value="#ffc107")
              option(value="#28a745")
              option(value="#20c997")
              option(value="#17a2b8")
              option(value="#6c757d")
              option(value="#343a40")

      .modal-footer
        button.btn-sm.btn-red(data-modal-close="create-event", type="button")
          |  Cancelar
          i.fi.fi-rr-cross-circle
        button.btn-sm.btn-blue(type="submit")
          |  Enviar
          i.fi.fi-rr-check-circle

  div(data-modal="edit-event")
    form.modal.modal-md(action="/apps/calendar/update", method="POST")
      input(type="hidden", name="id", id="edit-id")
      .modal-head
        h3.modal-title
          div
            i.fi.fi-rr-calendar-day
            | Editar evento
          i.fi.fi-rr-cross-small.text-red(title="Fechar modal", data-modal-close="edit-event")
      .modal-body
        .form-item 
          label(for="title") 
            i.fi.fi-rr-edit-alt
            |  Título
          input(type="text", name="title", id="edit-title", placeholder="Título do evento")
        .form-item
          label(for="description") 
            i.fi.fi-rr-edit-alt
            |  Descrição
          textarea.form-control(name="description", id="edit-description")
        .form-group 
          .form-item 
            label(for="dateStart") 
              i.fi.fi-rr-calendar-check
              |  Data de início
            input(type="date", name="dateStart", id="edit-dateStart")
          .form-item 
            label(for="timeStart") 
              i.fi.fi-bs-time-quarter-past
              |  Hora de início
            input(type="time", name="timeStart", id="edit-timeStart", value="08:00")
        .form-group 
          .form-item 
            label(for="dateFinish") 
              i.fi.fi-rr-calendar-xmark
              |  Data de término
            input(type="date", name="dateFinish", id="edit-dateFinish")
          .form-item
            label(for="timeFinish") 
              i.fi.fi-rr-time-delete
              |  Hora de término
            input(type="time", name="timeFinish", id="edit-timeFinish", value="10:00")
        .form-group
          .form-item 
            label(for="type") 
              i.fi.fi-rr-tag
              |  Tipo
            select.form-control(name="type", id="edit-type")
              option(value="1") Reunião
              option(value="2") Compromisso
              option(value="3", selected) Tarefa
              option(value="4") Outro
          .form-item 
            label(for="color") 
              i.fi.fi-rr-palette
              |  Cor
            input(type="color", name="color", id="edit-color", value="#007bff", list="colors")
            datalist#colors
              option(value="#007bff")
              option(value="#6610f2")
              option(value="#6f42c1")
              option(value="#e83e8c")
              option(value="#dc3545")
              option(value="#fd7e14")
              option(value="#ffc107")
              option(value="#28a745")
              option(value="#20c997")
              option(value="#17a2b8")
              option(value="#6c757d")
              option(value="#343a40")

      .modal-footer
        button.btn-sm.btn-red(data-modal-close="edit-event", type="button")
          |  Cancelar
          i.fi.fi-rr-cross-circle
        button.btn-sm.btn-blue(type="submit")
          |  Salvar alterações
          i.fi.fi-rr-check-circle

  div(data-modal="delete-event")
    form.modal.modal-sm(action="/apps/calendar/delete", method="POST")
      input(type="hidden", name="id", id="delete-id")
      .modal-head
        h3.modal-title
          div
            i.fi.fi-rr-calendar-day
            | Excluir evento
          i.fi.fi-rr-cross-small.text-red(title="Fechar modal", data-modal-close="delete-event")
      .modal-body
        | Você tem certeza que deseja excluir este evento?
      .modal-footer
        button.btn-sm.btn-red(data-modal-close="delete-event", type="button")
          |  Cancelar
          i.fi.fi-rr-cross-circle
        button.btn-sm.btn-blue(type="submit")
          |  Excluir
          i.fi.fi-rr-check-circle

  div#calendar-container
    .calendar-header 
      button(onclick='next(this)') 
        i.fi.fi-br-angle-right
      div(id="show-date") 
      button(onclick='prev(this)') 
        i.fi.fi-br-angle-left
    #calendar.calendar-body
      
  script(src="/public/js/holidays.js")
  script. 
    const calendar = document.getElementById('calendar'),
      btnToday = document.getElementById('btn-today-calendar'),
      btnYear = document.getElementById('btn-year-view'),
      btnMonth = document.getElementById('btn-month-view'),
      btnWeek = document.getElementById('btn-week-view'),
      btnDay = document.getElementById('btn-day-view'),
      TODAY = new Date(),
      todayElement = document.getElementById('today'),
      today = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo', day: 'numeric', month: 'long', year: 'numeric'}),
      months = Array.from({ length: 12 }).fill().map((_, i) => new Date(2023, i, 1).toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo', month: 'long' })).map(month => month.charAt(0).toUpperCase() + month.slice(1)),
      days = Array.from({ length: 7 }).fill().map((_, i) => new Date(2023, 0, i + 1).toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo', weekday: 'long' })).map(day => day.charAt(0).toUpperCase() + day.slice(1)),
      shortDays = Array.from({ length: 7 }).fill().map((_, i) => new Date(2023, 0, i + 1).toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo', weekday: 'short' })).map(day => day.toUpperCase());

    todayElement.innerHTML = today; 

    const events = JSON.parse(`!{JSON.stringify(events)}`);

    if (events.events) {
      events.events.forEach(event => {
        let dateOfStartEvent = new Date(event.dateStart + "T" + event.timeStart),
          dateOfFinishEvent = new Date(event.dateFinish + "T" + event.timeFinish);

        let monthOfStartEvent = dateOfStartEvent.getMonth();

        holidays[monthOfStartEvent].holidays.push({
          day: dateOfStartEvent.getDate(),
          year: dateOfStartEvent.getFullYear(),
          id: event.id,
          description: event.description,
          title: event.title,
          color: event.color,
          timeStart: event.timeStart,
          timeFinish: event.timeFinish,
          type: event.type
        });
      });
    }

    const params = new URLSearchParams(window.location.search);
    
    // views: year, month, week, day
    let currentView = params.get('view') ? params.get('view') : 'month', 
      currentDate = params.get('day') ? Number(params.get('day')) : TODAY.getDate(),
      currentMonth = params.get('month') ? Number(params.get('month')) - 1 : TODAY.getMonth(),
      currentYear = params.get('year') ? Number(params.get('year')) : TODAY.getFullYear();
      currentDay = TODAY.getDay();

    const showDate = document.getElementById('show-date');
    showDate.innerHTML = months[currentMonth] + ' ' + currentYear;

    const dateStart = document.getElementById('dateStart');
    const dateFinish = document.getElementById('dateFinish');
    const timeStartElement = document.getElementById('timeStart');
    const timeFinishElement = document.getElementById('timeFinish');

    dateStart.value = TODAY.getFullYear() + '-' + String(TODAY.getMonth() + 1).padStart(2, '0') + '-' + String(TODAY.getDate()).padStart(2, '0');
    dateFinish.value = dateStart.value;
    
    function setView() {
      btnYear.classList.remove('calendar-visualizer-active');
      btnMonth.classList.remove('calendar-visualizer-active');
      btnWeek.classList.remove('calendar-visualizer-active');
      btnDay.classList.remove('calendar-visualizer-active');
    
      switch(currentView) {
        case 'year':
          btnYear.classList.add('calendar-visualizer-active');
          break;
        case 'month':
          btnMonth.classList.add('calendar-visualizer-active');
          break;
        case 'week':
          btnWeek.classList.add('calendar-visualizer-active');
          break;
        case 'day':
          btnDay.classList.add('calendar-visualizer-active');
          break;
      }
    }

    function renderCalendar(){
      calendar.innerHTML = '';
    
      switch(currentView){
        case 'year':
          renderYear(currentYear);
          showDate.innerHTML = currentYear;
          break;
        case 'month':
          renderMonth(true, true, true);
          showDate.innerHTML = months[currentMonth] + ' de ' + currentYear;
          break;
        case 'week':
          renderWeek(new Date(currentYear, currentMonth, currentDate));
          showDate.innerHTML = getWeekNumber(new Date(currentYear, currentMonth, currentDate)) + 'ª semana de ' + currentYear + ', ' + months[currentMonth];
          break;
        case 'day':
          renderDay(new Date(currentYear, currentMonth, currentDate));
          showDate.innerHTML = getDayNumber(new Date(currentYear, currentMonth, currentDate)) + 'º dia de ' + currentYear + ', ' + months[currentMonth];
          break;
      }

      setView();
    }

    function next(e){
      switch(currentView){
        case 'year':
          currentYear++;
          renderCalendar();
          break;
        case 'month':
          if(currentMonth === 11){
            currentMonth = 0;
            currentYear++;
          } else {
            currentMonth++;
          }
          renderCalendar();
          break;
        case 'week':
          let newDate = new Date(currentYear, currentMonth, currentDate + 7);
          currentYear = newDate.getFullYear();
          currentMonth = newDate.getMonth();
          currentDate = newDate.getDate();
          renderCalendar();
          break;
        case 'day':
          let newDate2 = new Date(currentYear, currentMonth, currentDate + 1);
          currentYear = newDate2.getFullYear();
          currentMonth = newDate2.getMonth();
          currentDate = newDate2.getDate();
          renderCalendar();
          break;
      }
    }

    function prev(e){
      switch(currentView){
        case 'year':
          currentYear--;
          renderCalendar();
          break;
        case 'month':
          if(currentMonth === 0){
            currentMonth = 11;
            currentYear--;
          } else {
            currentMonth--;
          }
          renderCalendar();
          break;
        case 'week':
          let newDate = new Date(currentYear, currentMonth, currentDate - 7);
          currentYear = newDate.getFullYear();
          currentMonth = newDate.getMonth();
          currentDate = newDate.getDate();
          renderCalendar();
          break;
        case 'day':
          let newDate2 = new Date(currentYear, currentMonth, currentDate - 1);
          currentYear = newDate2.getFullYear();
          currentMonth = newDate2.getMonth();
          currentDate = newDate2.getDate();
          renderCalendar();
          break;
      }
    }

    function changeView(e, view){
      currentView = view;

      const buttons = document.querySelectorAll('#views-switcher button');
      buttons.forEach(button => button.classList.remove('calendar-visualizer-active'));
      e.classList.add('calendar-visualizer-active');

      renderCalendar();
    }

    function renderYear(){
      const div = document.createElement('div');
      div.classList.add('calendar-year');

      for(let i = 0; i < 12; i++){
        const month = document.createElement('div');
        month.classList.add('calendar-month');
        month.addEventListener('click', () => {
          currentMonth = i;
          currentView = 'month';
          renderCalendar();
        });
        
        const days = renderMonth();
        currentMonth = i + 1;

        const monthName = document.createElement('div');
        monthName.classList.add('calendar-month-name');
        monthName.innerHTML = months[i];
        
        month.appendChild(monthName);
        month.appendChild(days);
        div.appendChild(month);
      }
      
      currentMonth = TODAY.getMonth();
      calendar.appendChild(div);
    }

    function renderMonth(append = false, prevDays = false, nextDays = false){                  
      const quantityDaysInCurrentMonth = new Date(currentYear, currentMonth + 1, 0).getDate(),
        startDayCurrentMonth = new Date(currentYear, currentMonth, 1).getDay(),
        daysInLastMonth = new Date(currentYear, currentMonth, 0).getDate();

      let daysCounter = -1, 
        daysInNextMonth = 1,
        daysInLastMonthCounter = daysInLastMonth - startDayCurrentMonth + 1,
        daysInCurrentMonthCounter = 1,
        weeks = Math.ceil((quantityDaysInCurrentMonth + startDayCurrentMonth) / 7) + 1;

      const div = document.createElement('div');
      div.classList.add('calendar-days');

      const holidaysOfMonth = holidays[currentMonth];

      for (let i = 0; i < weeks; i++) {
        const week = document.createElement('div');
        week.classList.add('calendar-week');

        for (let j = 0; j < 7; j++) {
          const day = document.createElement('div');
          day.classList.add('calendar-day');

          if (i === 0) {
            day.innerHTML = shortDays[j];
            day.classList.add('week-day');
          } else {                    
            daysCounter++;
            
            if (daysCounter >= startDayCurrentMonth && daysInCurrentMonthCounter <= quantityDaysInCurrentMonth) {
              day.innerHTML = daysInCurrentMonthCounter;

              const bars = document.createElement('div');
              bars.classList.add('bars-holidays');
              day.appendChild(bars);

              let find = holidaysOfMonth.holidays.filter(holiday => holiday.day === daysInCurrentMonthCounter);

              if (find.length > 0) {     
                find.forEach(holiday => {
                  if (holiday.day === daysInCurrentMonthCounter) {
                    // ano
                    if (holiday.year === currentYear) {
                      let barHoliday = document.createElement('div');
                      barHoliday.classList.add('bar-holiday');
                      barHoliday.style.backgroundColor = holiday.color ? holiday.color : '#dc3545';
                      barHoliday.title = holiday.title;
                      bars.appendChild(barHoliday);
                    } else {
                      let barHoliday = document.createElement('div');
                      barHoliday.classList.add('bar-holiday');
                      barHoliday.style.backgroundColor = holiday.color ? holiday.color : '#dc3545';
                      barHoliday.title = holiday.title + ' (' + holiday.year + ')';
                      bars.appendChild(barHoliday);
                    }
                  }
                });
              }

              if (currentView === 'month') {
                day.addEventListener('click', (e) => {
                  currentDate = Number(e.target.innerText);
                  currentView = 'day';
                  renderCalendar();
                });
              }

              daysInCurrentMonthCounter++;
            } else if (daysCounter < startDayCurrentMonth && prevDays) {	
              day.innerHTML = daysInLastMonthCounter;
              day.classList.add('prev-days');

              if (currentView === 'month') {
                day.addEventListener('click', (e) => {
                  currentDate = Number(e.target.innerText);
                  currentMonth < 1 ? currentMonth = 11 : currentMonth--;
                  currentView = 'day';
                  renderCalendar();
                });
              }

              daysInLastMonthCounter++;
            } else if (daysCounter > quantityDaysInCurrentMonth && nextDays) {
              day.innerHTML = daysInNextMonth;
              day.classList.add('next-days');

              if (currentView === 'month') {
                day.addEventListener('click', (e) => {
                  currentDate = Number(e.target.innerText);
                  currentMonth > 10 ? currentMonth = 0 : currentMonth++;
                  currentView = 'day';
                  renderCalendar();
                });
              }

              daysInNextMonth++;
            }
          }

          week.appendChild(day);
        }

        div.appendChild(week);
      }

      if(append) calendar.appendChild(div); 
      else return div;
    }

    function renderWeek(){
      const div = document.createElement('div');
      div.classList.add('calendar-days');

      const date = new Date(currentYear, currentMonth, currentDate);

      for(let i = 0; i < 2; i++){
        const week = document.createElement('div');
        week.classList.add('calendar-week');

        for(let j = 0; j < 7; j++){
          const day = document.createElement('div');
          day.classList.add('calendar-day');

          if(i === 0){
            day.innerHTML = shortDays[j];
            day.classList.add('week-day');
          } else {
            const dayDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + j - date.getDay() + (i - 1) * 7);
            day.innerHTML = dayDate.getDate();

            day.addEventListener('click', () => {
              currentDate = dayDate.getDate();
              currentMonth = dayDate.getMonth();
              currentYear = dayDate.getFullYear();
              currentView = 'day';
              renderCalendar();
            });

            const bars = document.createElement('div');
            bars.classList.add('bars-holidays');
            day.appendChild(bars);

            const holidaysOfMonth = holidays[dayDate.getMonth()];
            let find = holidaysOfMonth.holidays.filter(holiday => holiday.day === dayDate.getDate());

            if (find.length > 0) {
              find.forEach(holiday => {
                let barHoliday = document.createElement('div');
                barHoliday.classList.add('bar-holiday');
                barHoliday.style.backgroundColor = holiday.color ? holiday.color : '#dc3545';
                barHoliday.title = holiday.title;
                bars.appendChild(barHoliday);
              });
            }

            day.classList.add('current-month');
          }

          week.appendChild(day);
        }

        div.appendChild(week);
      }

      calendar.appendChild(div);
    }

    function renderDay(){
      const div = document.createElement('div');
      div.classList.add('calendar-month');

      const date = new Date(currentYear, currentMonth, currentDate);

      for(let i = 0; i < 2; i++){
        const week = document.createElement('div');
        week.classList.add('calendar-week');

        for(let j = 0; j < 1; j++){
          const day = document.createElement('div');
          day.classList.add('calendar-day');

          if(i === 0){
            day.innerHTML = shortDays[date.getDay()];
            day.classList.add('week-day');
          } else {
            day.innerHTML = date.getDate();
          }

          week.appendChild(day);
        }

        div.appendChild(week);
      }

      calendar.appendChild(div);

      const hours = document.createElement('div');
      hours.classList.add('hours');

      const holidaysOfMonth = holidays[currentMonth];
      let find = holidaysOfMonth.holidays.filter(holiday => holiday.day === date.getDate())
    
      find.sort((a, b) => {
        let timeA = a.timeStart.split(':');
        let timeB = b.timeStart.split(':');

        return Number(timeA[0]) - Number(timeB[0]);
      });

      for (let i = 0; i < 24; i++) {
        const hour = document.createElement('div');
        hour.classList.add('day-hour');
        
        const hourNumber = document.createElement('div');
        hourNumber.classList.add('hour-number');
        hourNumber.innerHTML = String(i).padStart(2, '0') + ':00 <hr> ';
        
        let dateTime = new Date(date.getFullYear(), date.getMonth(), date.getDate(), i, 0);

        if (find.length > 0) {
          find.forEach(holiday => {      
            let { timeStart, timeFinish } = holiday ? holiday : { timeStart: null, timeFinish: null };
            let dateTimeStart = timeStart ? new Date(date.getFullYear(), date.getMonth(), date.getDate(), timeStart.split(':')[0], timeStart.split(':')[1]) : null;
            let dateTimeFinish = timeFinish ? new Date(date.getFullYear(), date.getMonth(), date.getDate(), timeFinish.split(':')[0], timeFinish.split(':')[1]) : null;

            if (dateTime >= dateTimeStart && dateTime <= dateTimeFinish) {
              hour.style.backgroundColor = holiday.color ? hexaToRGBA(holiday.color, 0.2) : hexaToRGBA('#dc3545', 0.2);
              hour.classList.add('hour-active');
              hour.style.borderColor = holiday.color ? holiday.color : '#dc3545';

              if (holiday.id) {
                hour.addEventListener('click', () => {
                  document.getElementById('edit-id').value = holiday.id;
                  document.getElementById('edit-title').value = holiday.title;
                  document.getElementById('edit-description').value = holiday.description;
                  document.getElementById('edit-color').value = holiday.color ? holiday.color : '#dc3545';
                  document.getElementById('edit-type').value = holiday.type;          
                  document.getElementById('edit-dateStart').value = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0');
                  document.getElementById('edit-dateFinish').value = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0');
                  document.getElementById('edit-timeStart').value = timeStart;
                  document.getElementById('edit-timeFinish').value = timeFinish;

                  document.querySelector('[data-modal="edit-event"]').classList.add('modal-open');
                });
              } else {
                hour.classList.add('hour-inactive');
                hour.addEventListener('click', () => buttonClick(i, date));
              }

              if (dateTime.getTime() === dateTimeStart.getTime()) {
                hourNumber.innerHTML = String(i).padStart(2, '0') + ':00 - ' + holiday.title + '<hr>';
                hour.classList.add('hour-active-first');
                
                const btnDelete = document.createElement('button');
                btnDelete.classList.add('btn-sm');
                btnDelete.innerHTML = '<i class="fi fi-rr-trash"></i>';
              
                btnDelete.addEventListener('click', () => {
                  document.getElementById('delete-id').value = holiday.id;
                  document.querySelector('[data-modal="delete-event"]').classList.add('modal-open');
                  setTimeout(() => {
                    document.querySelector('[data-modal="edit-event"]').classList.remove('modal-open');
                  }, 5);
                });

                hour.appendChild(btnDelete);
              } else if (dateTime.getTime() === dateTimeFinish.getTime()) {
                hour.classList.add('hour-active-last');
                hourNumber.innerHTML = String(i).padStart(2, '0') + ':00 <hr>';
              } 
            } else hour.addEventListener('click', () => buttonClick(i, date));            
          });
        } else hour.addEventListener('click', () => buttonClick(i, date));
  
        hour.appendChild(hourNumber);
        hours.appendChild(hour);
      }

      calendar.appendChild(hours);
    }

    function getWeekNumber(date) {
      const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
      const dayNum = d.getUTCDay() || 7;
      d.setUTCDate(d.getUTCDate() + 4 - dayNum);
      const yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));
      return Math.ceil((((d - yearStart) / 86400000) + 1)/7);
    }

    function getDayNumber(date) {
      const start = new Date(date.getFullYear(), 0, 0);
      const diff = date - start;
      const oneDay = 1000 * 60 * 60 * 24;
      const day = Math.floor(diff / oneDay);
      return day;
    }
    
    function hexaToRGBA(color, opacity) {
      let r = parseInt(color.slice(1, 3), 16),
        g = parseInt(color.slice(3, 5), 16),
        b = parseInt(color.slice(5, 7), 16);

      return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + opacity + ')';
    }

    function buttonClick(i, date) {
      dateStart.value = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0');
      dateFinish.value = dateStart.value;

      timeStartElement.value = String(i).padStart(2, '0') + ':00';

      if (timeStartElement.value == '23:00') timeFinishElement.value = '00:00';
      else timeFinishElement.value = String((i + 1)).padStart(2, '0') + ':00';

      document.querySelector('[data-modal-open="create-event"]').click();
    }
    
    function changeToday() {
      const date = new Date();
      currentDate = date.getDate();
      currentMonth = date.getMonth();
      currentYear = date.getFullYear();
      renderCalendar();
    }

    renderCalendar();
