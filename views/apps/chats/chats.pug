extends ../../layout
block content 
  style. 
    .box-title {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 10px;
      height: 3rem;
      background-color: #fff;
      border-bottom: 1px solid #ccc;
      width: 100%;
      flex: 1;
    }

    .chumb {
      display: inline-block;
      padding: 0.2rem 0.5rem;
      border-radius: 50%;
      background-color: blue;
      color: #fff;
      font-size: 0.8rem;
    }

    .list-of-chats {
      overflow-y: scroll;
      max-height: 50vh;
      width: 100%;
    }

    .list-of-chats::-webkit-scrollbar {
      width: 0.5rem;
    }

    .list-of-chats::-webkit-scrollbar-track {
      background-color: #f1f1f1;
    }

    .list-of-chats::-webkit-scrollbar-thumb {
      background-color: #888;
      border-radius: 1rem;
    }
    
    .list-of-chats::-webkit-scrollbar-thumb:hover {
      background: #555;
    }

    .chat-item {
      display: flex;
      align-items: center;
      padding: 0.5rem 1rem;
      border-bottom: 1px solid #ccc;
      width: 100%;
      flex: 1;
      overflow: hidden;
    }

    .chat-user-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      overflow: hidden;
    }

    .chat-user-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .chat-user-info {
      margin-left: 10px;
    }

    .chat-user-name {
      font-weight: bold;
      font-size: medium;
    }

    .chat-user-last-message {
      font-size: 0.8rem;
      color: #666;
      white-space: nowrap;
      word-wrap: normal;
      overflow: hidden;
      text-overflow: ellipsis;
      width: 200px;
      margin-top: 0.2rem;
    }

    .chat-show {
      height: 90vh;
      max-height: 90vh;
    }

    .user-talking {
      display: flex;
      align-items: center;
      padding: 0;
      height: 3rem;
      background-color: #fff;
      border-bottom: 1px solid #ccc;
    }

    .talk-avatar {
      width: 2.4rem;
      height: 2.4rem;
      border-radius: 50%;
      overflow: hidden;
    }

    .talk-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .talk-info {
      margin-left: 1rem;
    }

    .talk-name {
      font-weight: bold;
    }

    .talk-status {
      font-size: 0.8rem;
      color: #666;
    }

    .conversation {
      width: 100%;
      height: 93% !important;
      max-height: 93% !important;
      overflow-y: scroll;
      background-color: #f1f1f1;
      padding: 10px;
      scroll-behavior: smooth;
    }

    .conversation::-webkit-scrollbar {
      width: 0.5rem;
    }

    .conversation::-webkit-scrollbar-track {
      background-color: #f1f1f1;
    }

    .conversation::-webkit-scrollbar-thumb {
      background-color: #888;
      border-radius: 1rem;
    }

    .conversation::-webkit-scrollbar-thumb:hover {
      background: #555;
    }

    .message-left {
      display: flex;
      align-items: center;
      justify-content: flex-start;
      margin-bottom: 1rem;
      gap: 8px;
    }

    .message-right {
      display: flex;
      align-items: center;
      justify-content: flex-end;
      margin-bottom: 1rem;
      gap: 8px;
      color: white;
    }

    .message-left img, .message-right img {
      width: 1.5rem;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      object-fit: cover;  
      background-color: #fff;
      border: 1px solid #ccc;
      padding: 2px;

    }

    .message-content {
      padding: 0.5rem 1rem;
      border-radius: 1rem;
      background-color: #fff;
      max-width: 50%;
    }

    .message-right .message-content {
      background-color: #007bff;
    }

    .form-control {
      border-radius: 0;
      border: none;
      border-top: 1px solid #ccc;
      border-bottom: 1px solid #ccc;
      border-left: 1px solid #ccc;
      padding: 0.5rem 1rem;
      width: 100%;
      display: inline-block;
      height: 100%;
    }

    .container-chat {
      width: 100%;
      height: 96vh;
    }

    .row-chat {
      height: 100%;
      display: flex;
      align-items: flex-start;
      justify-content: flex-start;
    }

    .col-chat-3 {
      width: 25%;
      height: 100%;
    }

    .col-chat-9 {
      width: 75%;
      height: 100%;
    }

    .date-of-messages {
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      color: #666;
      margin: 1rem auto;
      width: fit-content;
      padding: 0.2rem 0.5rem;
      border-radius: 0.5rem;
      background-color: #f1f1f1;
    }

    .talk-status {
      width: 0.8rem;
      height: 0.8rem;
      border-radius: 50%;
      background-color: red;
      margin-left: 0.5rem;
    }

    #typing {
      display: none;
      font-size: 0.8rem;
      color: #666;
      margin-left: 0.5rem;
    }

    .news-messages-quantity {
      font-size: 0.8rem;
      color: #fff;
      background-color: green;
      border-radius: 50%;
      padding: 0.2rem 0.5rem;
      margin-left: 0.5rem;
      float: right;
    }

  - const listOfChats = JSON.parse(JSON.stringify(chats));

  .container-chat
    .row-chat
      .col-chat-3
        h4.box-title
          i.fi.fi-rr-comment-alt
          | Chats
          button.btn-sm.b-transparent(data-modal-open="add-friend" stye="margin-bottom: 1rem; width: 100%;")
            i.fi.fi-rr-user-add
          .chumb #{listOfChats.length}
          
        .list-of-chats
          if !listOfChats.length
            p Você não tem chats
          else
            each chat in listOfChats
              //- a.chat-item(href=(chat.groupId ? "/apps/groups/v/" : "/apps/chats/v/") + chat.id)
              .chat-item(onclick=`showMessages('${chat.id}')`, id=`chat-${chat.id}`)
                .chat-user-avatar
                  img(src=chat.avatar, alt)
                .chat-user-info
                  .chat-user-name #{chat.username} - #{chat.name}
                  - let allMessages = JSON.parse(chat.conversations)
                  if allMessages.length
                    .chat-user-last-message #{allMessages[allMessages.length - 1].message}
                  div(id="typing-" + chat.id, style="display: none; color: green; font-size: small;")
                    | Escrevendo...
                  - let newsMessages = allMessages.filter(message => message.from !== user.id && !message.toRead).length
                .news-messages-quantity(style=`${newsMessages ? 'display: block;' : 'display: none;'}`) #{newsMessages}
                                                
        h4.box-title
          i.fi.fi-rr-users
          | Grupos
          .chumb 0
        .list-of-chats
          .chat-item
            .chat-user-avatar
              img(src="https://picsum.photos/50/50", alt)
            .chat-user-info
              .chat-user-name Nome do chat
              .chat-user-last-message Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.
                                  
      .col-chat-9.chat-show 
        h4.box-title
          div.user-talking
            div.talk-avatar
              img(src="", alt, id="avatar-talk", style="display: none;")
            div.talk-info
              div.talk-name 
                small.talk-status
              p#typing Escrevendo...
          
        .conversation

        div(style="height: 3rem; background-color: #fff; border-bottom: 1px solid #ccc; display: flex; align-items: center; justify-content: center;")
          input(type="text" id="text-message" class="form-control" placeholder="Digite sua mensagem" aria-label="Digite sua mensagem" aria-describedby="button-addon2")
          div.input-group-append
            button.btn.btn-outline-blue(type="button" id="button-addon2") 
              i.fi.fi-rr-paper-plane
    

    div(data-modal="add-friend")
      form.modal.modal-sm(action="/apps/chats/new", method="POST")  
        .modal-head
          h3.modal-title
            div
              i.fi.fi-rr-envelope
              | Buscar usuário
            i.fi.fi-rr-cross-small.text-red(title="Fechar modal", data-modal-close="add-friend")
        .modal-body
          .form-group
            label(for="to") 
              i.fi.fi-rr-user
              |  Usuário
            input(type="text", id="search", placeholder="Username ou email do usuário")
            input(type="hidden", name="to", id="to", readonly)
            div#users-suggestions
        .modal-footer
          button.btn-sm.btn-red(data-modal-close="add-friend", type="button")
            |  Cancelar
            i.fi.fi-rr-cross-circle
          button.btn-sm.btn-blue(type="submit")
            |  Enviar
            i.fi.fi-rr-check-circle
    
  script.
    const listOfChats = toObject(`#{JSON.stringify(chats)}`);
    let chatConversation = null;
    let userTalking = null;
    const talkStatus = document.querySelector('.talk-status');
    const inputMessage = document.querySelector('#text-message');

    window.addEventListener('beforeunload', () => IO.emit('leave-chat', { chatId: chatConversation, userId: myInfos.id }));

    function showMessages(chatId) {
      if (chatConversation) IO.emit('leave-chat', { chatId , userId: myInfos.id });

      chatConversation = chatId;
      userTalking = listOfChats.find(chat => chat.id === chatId);

      const chat = listOfChats.find(chat => chat.id === chatId);
      const messages = chat.conversations;
      const conversation = document.querySelector('.conversation');
      const avatarTalk = document.getElementById('avatar-talk');
      const talkName = document.querySelector('.talk-name');

      IO.emit('join-chat', { chatId, userId: myInfos.id });

      avatarTalk.src = chat.avatar;
      avatarTalk.style.display = 'block';
      talkName.innerHTML = chat.name;
      conversation.innerHTML = 'Carregando mensagens...';

      http(`/apps/chats/c/${chatId}/messages`)
        .then(response => response.json())
        .then(data => {
          conversation.innerHTML = '';
          
          Object.keys(data.conversations)?.forEach(date => {
            conversation.innerHTML += `<div class="date-of-messages">${date}</div>`;

            data.conversations[date]?.forEach(message => {
              console.log(message);
              createMessage(message.message, message.from === myInfos.id ? 'me' : 'other');
            });
          });
        });

      const chatItem = document.getElementById(`chat-${chatId}`);
      chatItem.querySelector('.news-messages-quantity').innerHTML = 0;
      chatItem.querySelector('.news-messages-quantity').style.display = 'none';
    }

    const btnSend = document.getElementById('button-addon2');

    btnSend.addEventListener('click', () => {
      const input = document.querySelector('.form-control');
      const message = input.value;
      const conversation = document.querySelector('.conversation');
      const object = listOfChats.find(chat => chat.id === chatConversation);

      if (!message) return;

      http('/apps/chats/newMessage', { text: message, chatId: object.id }, 'PUT')
        .then(data => {
          if (data.status === 200) createMessage(message, 'me');
          else console.log(data);
        }); 
  
      IO.emit('message-chat', { message, chatId: object.id, from: myInfos.id, to: (userTalking.userToId === myInfos.id ? userTalking.userFromId : userTalking.userToId) });
      IO.emit('notification', { title: "Nova mensagem", message: myInfos.name + " enviou uma nova mensagem!", userId: (object.userFromId === myInfos.id ? object.userToId : object.userFromId) });

      http('/apps/chats/newMessage', { text: message, chatId: object.id }, 'PUT');

      input.value = '';
    });    

    IO.on('message-chat', data => {
      if (data.chatId === chatConversation) createMessage(data.message, 'other')
      else {
        const chat = listOfChats.find(chat => chat.id === data.chatId);
        const chatItem = document.getElementById(`chat-${data.chatId}`);

        chatItem.querySelector('.news-messages-quantity').innerHTML = Number(chatItem.querySelector('.news-messages-quantity').innerHTML) + 1;
        chatItem.querySelector('.news-messages-quantity').style.display = 'block';
        chatItem.querySelector('.chat-user-last-message').innerHTML = data.message;
      }
    });

    IO.on("typing-chat", (data) => {
      if (data.chatId !== chatConversation) {
        const chat = document.getElementById('chat-' + data.chatId);
        const typing = document.getElementById('typing-' + data.chatId);        
        const last = chat.querySelector('.chat-user-last-message');

        typing.style.display = 'block';
        last.style.display = 'none';

        setTimeout(() => {
          typing.style.display = 'none';
          last.style.display = 'block';
        }, 3000);

      } else {
        const typing = document.getElementById('typing');
        typing.style.display = 'block';
        setTimeout(() => typing.style.display = 'none', 3000);
      }

    });

    IO.on("join-chat", (usersChat) => usersChat.users.length > 1 ? talkStatus.style.backgroundColor = 'green' : talkStatus.style.backgroundColor = 'red');
    IO.on("leave-chat", (usersChat) => usersChat.users.length === 1 ? talkStatus.style.backgroundColor = 'red' : talkStatus.style.backgroundColor = 'green');
    
    inputMessage.addEventListener('input', () => {
      console.log("Eu estou escrevendo! Meu id: " + myInfos.id);
      try {
        IO.emit('typing-chat', { chatId: chatConversation, from: myInfos.id, to: (userTalking.userToId === myInfos.id ? userTalking.userFromId : userTalking.userToId) });
      } catch (error) {
        console.log(error);
      }
    });

    function createMessage(message, type, avatar = '/public/images/avatar.png') {
      const conversation = document.querySelector('.conversation');

      conversation.innerHTML += `
        <div class="message-${type === 'me' ? 'right' : 'left'}">
          ${type === 'other' ? `<img src="${avatar}" alt="">` : ''}
          <div class="message-content">
            <p>${message}</p>
            <small>${new Date().toLocaleString("pt-BR", { hour: 'numeric', minute: 'numeric' })}</small>
          </div>
          ${type === 'me' ? `<img src="${myInfos.avatar}" alt="">` : ''}
        </div>
      `;

      conversation.scrollTop = conversation.scrollHeight;
    }
